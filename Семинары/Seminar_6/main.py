'''
Задача №39. Решение в группах
Даны два массива чисел. Требуется вывести те элементы
первого массива (в том порядке, в каком они идут в первом
массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N
чисел - элементы массива. Затем число M - количество
элементов во втором массиве. Затем элементы второго массива
Ввод: 
7 - 3 1 3 4 2 4 12
6 - 4 15 43 1 15 1
Вывод:
3 3 2 12
'''

# list1 = [3, 1, 3, 4, 2, 4, 12]
# list2 = [4, 15, 43, 1, 15, 1]

# print([i for i in list1 if i not in list2])

'''
Задача №41. Решение в группах
Дан массив, состоящий из целых чисел. Напишите
программу, которая в данном массиве определит
количество элементов, у которых два соседних и, при
этом, оба соседних элемента меньше данного. Сначала
вводится число N — количество элементов в массиве
Далее записаны N чисел — элементы массива. Массив
состоит из целых чисел.
Ввод:
5 - 1 2 3 4 5 
Вывод:
0

Ввод:
5 - 1 5 1 5 1
Вывод:
2
'''

# arr = [1, 2, 3, 4, 25,  5, 28, 7,  29, 8, 9, 28, 4]
# count = 0
# for i in range(1, len(arr)-1):
#     if arr[i-1] < arr[i] > arr[i+1]:
#         count += 1
# print(count)

'''
Вариант решения через генератор списка
'''

# arr = [1, 2, 3, 4, 25,  5, 28, 7,  29, 8, 9, 28, 4]

# res = len([i for i in range(1, len(arr)-1) if arr[i-1] < arr[i] > arr[i+1]])

# print(res)


'''
Задача №43. Решение в группах
Дан список чисел. Посчитайте, сколько в нем пар
элементов, равных друг другу. Считается, что любые
два элемента, равные друг другу образуют одну пару,
которую необходимо посчитать. Вводится список
чисел. Все числа списка находятся на разных
строках.
Ввод:
1 2 3 2 3
Вывод:
2
'''

# my_list = [1, 2, 3, 1, 2, 3, 1, 3, 3]
# res = 0

# for i in set(my_list):
#     if abs(my_list.count(i)) >= 2:
#         res += my_list.count(i) // 2

# print(res)


'''
Решение через генератор списка
'''

# my_list = [1, 2, 3, 1, 2, 3, 1, 3, 3]

# res = sum([my_list.count(i) // 2 for i in set(my_list)
#           if abs(my_list.count(i)) >= 2])

# print(res)


'''
Задача №45. Решение в группах
Два различных натуральных числа n и m называются
дружественными, если сумма делителей числа n
(включая 1, но исключая само n) равна числу m и
наоборот. Например, 220 и 284 – дружественные числа.
По данному числу k выведите все пары дружественных
чисел, каждое из которых не превосходит k. Программа
получает на вход одно натуральное число k, не
превосходящее 10 в 5. Программа должна вывести все
пары дружественных чисел, каждое из которых не
превосходит k. Пары необходимо выводить по одной в
строке, разделяя пробелами. Каждая пара должна быть
выведена только один раз (перестановка чисел новую
пару не дает).
Ввод:
300
Вывод:
220 284
'''

'''
Первый вариант 50_000 примерно за 140.58 сек
'''

# from time import time as t
# n = 10
# res = {}
# list1 = []

# start = t()


# def find(x):
#     summ = 0
#     for i in range(1, x // 2 + 1):
#         if x % i == 0:
#             summ += i
#         res[x] = summ
#     return res


# for i in range(2, n + 1):
#     find(i)
# print(res)

# for k, v in res.items():
#     for k2, v2 in res.items():
#         if k2 == v and v2 == k and k != v and v > k:
#             print(k, v)


# for i in range(2, len(list1)+1, 2):
#     print(*list1[i-2:i])

# end = t()

# print(end - start)


'''
Второй вариант 50_000 примерно за 70.37 сек
'''


# from time import time as t
# n = 50000
# res = {}
# list1 = []

# start2 = t()


# def find(x):
#     res[x] = sum([i for i in range(1, x // 2 + 1) if x % i == 0])
#     return res


# for i in range(2, n + 1):
#     find(i)
# # print(res)


# list1 = [k for k, v in res.items()
#          for k2, v2 in res.items() if k2 == v and v2 == k and k != v]


# for i in range(2, len(list1)+1, 2):
#     print(*list1[i-2:i])

# end2 = t()

# print(end2 - start2)


'''
Третий вариант решения 50_000 примерно за 27.21
'''


# from time import time as t

# n = 100_000

# start3 = t()

# def find(x):
#     summ = sum([i for i in range(1, x//2 + 1) if x % i == 0])
#     return summ


# for i in range(2, (n + 1)):
#     j = find(i)
#     if i < j and i == find(j) and i != j:
#         print(i, j)

# end3 = t()
# print(end3 - start3)

'''
Искусственный интеллект Антон, созданный Гилфойлом, взломал сеть умных холодильников. Теперь он использует их в качестве серверов "Пегого дудочника".
Помогите владельцу фирмы отыскать все зараженные холодильники.

Для каждого холодильника существует строка с данными, состоящая из строчных букв и цифр, и если в ней присутствует слово "anton"
(необязательно рядом стоящие буквы, главное наличие последовательности букв), то холодильник заражен и нужно вывести номер холодильника,
нумерация начинается с единицы

Формат входных данных
В первой строке подаётся число 
n
n – количество холодильников. В последующих 
n
n строках вводятся строки, содержащие латинские строчные буквы и цифры, в каждой строке от 
5
5 до 
100
100 символов.

Формат выходных данных
Программа должна вывести номера зараженных холодильников через пробел. Если таких холодильников нет, ничего выводить не нужно.

Формат входных данных
В первой строке подаётся число 
n
n – количество холодильников. В последующих 
n
n строках вводятся строки, содержащие латинские строчные буквы и цифры, в каждой строке от 
5
5 до 
100
100 символов.

Формат выходных данных
Программа должна вывести номера зараженных холодильников через пробел. Если таких холодильников нет, ничего выводить не нужно.

Sample Input 1:
6
222anton456
a1n1t1o1n1
0000a0000n00t00000o000000n
gylfole
richard
ant0n
Sample Output 1:
1 2 3
Sample Input 2:
9
osfjwoiergwoignaewpjofwoeijfnwfonewfoignewtowenffnoeiwowjfninoiwfen
anton
aoooooooooontooooo
elelelelelelelelelel
ntoneeee
tonee
253235235a5323352n25235352t253523523235oo235523523523n
antoooooooooooooooooooooooooooooooooooooooooooooooooooon
unton
Sample Output 2:
1 2 7 8
'''

fridge = [
    '222anton456',
    'a1n1t1o1n1',
    '0000a0000n00t00000o000000n',
    'gylfole',
    'richard',
    'ant0n']


virus = 'anton'

for k in range(len(fridge)):
    j = 0
    for i in fridge[k]:
        if i.lower() == virus[j]:
            j += 1
            if j == 5:
                print(k+1, end=' ')
                break


'''
Рекурсией определеить палиндром или нет
'''


# def pal(s):
#     if len(s) <= 1:
#         return "Да"
#     elif s[0] == s[-1]:
#         return pal(s[1:-1])
#     return "Нет"


# print(pal('123456787654321'))


'''
1. Напишите функцию, которая принимает одно число и проверяет, является ли оно простым

*Напоминание: Простое число - это число, которое имеет 2 делителя: 1  и n(само число)*
'''


# def func(a, b=2):
#     if a == 2 or b * b > a: 
#         return True
#     elif a % b == 0:
#         return False
#     return func(a, b + 1)


# print(func(11))
